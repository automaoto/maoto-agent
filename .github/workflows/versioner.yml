name: Versioner

permissions:
  contents: write
  
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Select whether this is a Beta or a Release build'
        required: true
        type: choice
        options:
          - Beta
          - Release
        default: Beta

      version_update:
        description: 'How to increment the version (only applies if Beta)'
        required: true
        type: choice
        options:
          - Major
          - Minor
          - Patch
          - BetaCounter
        default: BetaCounter

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Ensure we fetch all tags (and remove shallow clone), so we can parse them:
          fetch-depth: 0

      - name: Determine next tag
        id: next_tag
        run: |
          # Grab the most recent tag in the repo:
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)

          if [ -z "$CURRENT_TAG" ]; then
            echo "No existing tags found. Please create an initial tag, e.g. v1.0.0, then rerun."
            exit 1
          fi

          echo "Latest tag is: $CURRENT_TAG"

          # Parse the current tag to extract (major, minor, patch, beta)
          # We expect either "vX.Y.Z" or "vX.Y.ZbNN"
          if [[ "$CURRENT_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)b([0-9]+)$ ]]; then
            # It's a beta tag
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            BETA="${BASH_REMATCH[4]}"
          elif [[ "$CURRENT_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            # It's a release tag
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            BETA=0
          else
            echo "Error: last tag does not match vX.Y.Z or vX.Y.ZbNN: $CURRENT_TAG"
            exit 1
          fi

          echo "Parsed: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH, BETA=$BETA"

          # Decide next version based on user input
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          VERSION_UPDATE="${{ github.event.inputs.version_update }}"

          if [ "$RELEASE_TYPE" = "Beta" ]; then
            # If Beta, decide how to update:
            if [ "$VERSION_UPDATE" = "Major" ]; then
              ((MAJOR++))
              MINOR=0
              PATCH=0
              BETA=1
            elif [ "$VERSION_UPDATE" = "Minor" ]; then
              ((MINOR++))
              PATCH=0
              BETA=1
            elif [ "$VERSION_UPDATE" = "Patch" ]; then
              ((PATCH++))
              BETA=1
            else
              # "BetaCounter": keep major/minor/patch, just increment the beta number
              ((BETA++))
            fi
            NEXT_TAG="v${MAJOR}.${MINOR}.${PATCH}b${BETA}"

          else
            # If Release, we require that the last tag was a Beta (BETA != 0).
            # Then strip off the beta portion to finalize the version as a release:
            if [ "$BETA" -eq 0 ]; then
              echo "Error: Cannot create a release from a non-beta tag ($CURRENT_TAG)."
              exit 1
            fi
            NEXT_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "NEXT_TAG=$NEXT_TAG"
          echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT

      - name: Checkout another repo
        uses: actions/checkout@v3
        with:
          repository: user_or_org/another-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          path: maoto-agent
          fetch-depth: 0

      - name: Create and push new tag
        run: |
          NEW_TAG="${{ steps.next_tag.outputs.next_tag }}"

          cd maoto-agent

          echo "Creating new tag: $NEW_TAG"

          # Configure Git
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Create and push tag
          git tag "$NEW_TAG"
          git push https://x-access-token:${{ secrets.MAOTO_AGENT }}@github.com/automaoto/maoto-agent.git "$NEW_TAG"

          echo "Tag $NEW_TAG pushed successfully."
