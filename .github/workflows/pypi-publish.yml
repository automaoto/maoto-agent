name: Build and Publish Pypi Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  prerelease_check:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
      use_matrix: ${{ steps.set_matrix.outputs.use_matrix }}
    steps:
      - name: Determine if it's a pre-release
        id: prerelease
        run: |
          if [[ "${GITHUB_REF#refs/tags/}" =~ [a] ]]; then
            echo "is_prerelease=true" > $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" > $GITHUB_OUTPUT
          fi
      - name: Set use_matrix output
        id: set_matrix
        run: |
          echo "use_matrix=false" > $GITHUB_OUTPUT # Or false if no matrix is required

  build_wheels_with_matrix:
    needs: prerelease_check
    if: needs.prerelease_check.outputs.is_prerelease == 'false' && needs.prerelease_check.outputs.use_matrix == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel
        run: |
          python -m pip install wheel cibuildwheel

      - name: Build wheels with cibuildwheel
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "*-win32"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: python-wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./wheelhouse/

  build_wheels_without_matrix:
    needs: prerelease_check
    if: needs.prerelease_check.outputs.is_prerelease == 'false' && needs.prerelease_check.outputs.use_matrix == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install wheel compileall2

      - name: Precompile Python files to bytecode
        run: |
          python -m compileall .
          find . -name "*.py" -type f -delete

      - name: Build wheels without cibuildwheel
        run: python -m pip wheel . --no-deps --wheel-dir ./wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: python-wheels
          path: ./wheelhouse/

  deploy:
    needs: [prerelease_check, build_wheels_without_matrix]
    if: needs.prerelease_check.outputs.is_prerelease == 'false'
    runs-on: ubuntu-latest
    environment: release_pypi
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: wheelhouse

      - name: Install twine
        run: |
          python -m pip install --upgrade twine

      - name: Publish to PyPI or Test PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TWINE_PASSWORD_TEST: ${{ secrets.PYPI_PASSWORD_TEST }}
        run: |
          ls -lR wheelhouse
          if [[ "${GITHUB_REF#refs/tags/}" =~ [brc] ]]; then
            echo "Uploading to Test PyPI..."
            python -m twine upload --repository-url https://test.pypi.org/legacy/ wheelhouse/*/* -u __token__ -p $TWINE_PASSWORD_TEST
          else
            echo "Uploading to PyPI..."
            python -m twine upload wheelhouse/*/* -u __token__ -p $TWINE_PASSWORD
          fi